# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

def get_factors(n):
    result = set()
    for i in range(1, int(n ** 0.5) + 1):
        div, mod = divmod(n, i)
        if mod == 0:
            result |= {i, div}
    return result


# def trinum(n):
#   return (n * (n+1) / 2)
def get_triangle_number(n):
    value = 0
    for j in range(1, n + 1):
        value += j

    return value


def get_min_divisible_by(min):
    finished = False
    current = 0

    while not finished:
        # increment values
        current += 1
        t = get_triangle_number(current)
        f = get_factors(t)

        # test
        if len(f) > min:
            return t

print get_min_divisible_by(50)
